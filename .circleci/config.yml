---
version: 2.1

orbs:
  # This is an orb maintained by circle to help with publishing
  orb-tools: circleci/orb-tools@2.0.0
  extract-orb:
    version: 2.1
    description: Extract an orb from a circle config using yq
    jobs:
      default:
        executor: docker
        parameters:
          orb:
            description: Name of orb to extract
            type: string
        steps:
          - checkout
          - run: |
              mkdir -p /tmp/orbs
              yq read .circleci/config.yml 'orbs.<<parameters.orb>>' \
                > /tmp/orbs/<<parameters.orb>>.yml
          - persist_to_workspace:
              root: /tmp/orbs
              paths:
                - <<parameters.orb>>.yml
    executors:
      docker:
        docker:
          - image: brownjohnf/alpine:master

  docker:
    version: 2.1
    description: Build, test and push a Docker image
    executors:
      docker:
        parameters:
          version:
            type: string
            default: master
        docker:
          - image: brownjohnf/docker:<<parameters.version>>
    jobs:
      build-test-push:
        executor: docker
        parameters:
          registry:
            description: Registry domain to push to
            type: string
            default: index.docker.io
          namespace:
            description: Registry namespace
            type: string
          project:
            description: Name of image
            type: string
          test_command:
            description: Name of image
            type: string
            default: make test
          path:
            description: Path to the Dockerfile context for the build
            type: string
            default: .
          push:
            description: Whether or not to attempt to push the image
            type: boolean
            default: true
        steps:
          - run: apk add --no-cache git openssh
          - checkout
          - setup_remote_docker
          - login:
              push: <<parameters.push>>
          - pull:
              image: <<parameters.registry>>/<<parameters.namespace>>/<<parameters.project>>
          - build:
              image: <<parameters.registry>>/<<parameters.namespace>>/<<parameters.project>>
              path: <<parameters.path>>
          - test:
              image: <<parameters.registry>>/<<parameters.namespace>>/<<parameters.project>>
              test_command: <<parameters.test_command>>
              path: <<parameters.path>>
          - push:
              image: <<parameters.registry>>/<<parameters.namespace>>/<<parameters.project>>
              push: <<parameters.push>>
    commands:
      login:
        parameters:
          push:
            type: boolean
        steps:
          - run:
              name: Login to Docker Registry
              command: |
                [[ "<<parameters.push>>" == "true" ]] || exit 0
                docker login -u $DOCKER_USER -p $DOCKER_PASS
      pull:
        parameters:
          image:
            type: string
        steps:
          - run:
              name: Pull image for caching purposes (to speed up builds)
              command: |
                docker pull <<parameters.image>>:${CIRCLE_SHA1} \
                || docker pull <<parameters.image>>:${CIRCLE_BRANCH} \
                || docker pull <<parameters.image>>:master
      build:
        parameters:
          image:
            type: string
          path:
            type: string
        steps:
          - run:
              name: Build main target
              command: |
                docker build \
                  -t <<parameters.image>>:${CIRCLE_SHA1} \
                  --target main \
                  <<parameters.path>>
      test:
        parameters:
          image:
            type: string
          test_command:
            type: string
          path:
            type: string
        steps:
          - run:
              name: Build test target
              command: |
                docker build \
                  -t <<parameters.image>>:test \
                  --target test \
                  <<parameters.path>>
          - run:
              name: Test
              command: |
                docker run -it --rm \
                  --entrypoint /bin/sh \
                  <<parameters.image>>:test \
                  -c '<<parameters.test_command>>'
      push:
        parameters:
          image:
            type: string
          push:
            type: boolean
        steps:
          - run:
              name: Push
              command: |
                # Abort if we don't want to push
                [[ "<<parameters.push>>" == "true" ]] || exit 0

                echo docker push <<parameters.image>>:${CIRCLE_SHA1}
                docker push <<parameters.image>>:${CIRCLE_SHA1} > /dev/null

                for tag in ${CIRCLE_BUILD_NUM} ${CIRCLE_BRANCH}; do
                  docker tag \
                    <<parameters.image>>:${CIRCLE_SHA1} \
                    <<parameters.image>>:${tag}

                  echo docker push <<parameters.image>>:${tag}
                  docker push <<parameters.image>>:${tag} > /dev/null
                done
  rust:
    version: 2.1
    description: Build and test rust projects
    executors:
      docker:
        parameters:
          version:
            type: string
            default: "latest"
        docker:
          - image: library/rust:<<parameters.version>>
    jobs:
      build:
        executor: docker
        parameters:
          version:
            type: string
            default: "latest"
          path:
            type: string
            default: .
          release:
            type: boolean
            default: false
        steps:
          - install_deps
          - checkout
          - restore_cache: &rust_restore_cache
              keys:
                - cargo-cache-v1-{{ arch }}-{{ checksum "<<parameters.path>>/Cargo.lock" }}
                - cargo-cache-v1-{{ arch }}-
          - run:
              name: Build
              command: |
                cd <<parameters.path>>
                if [ "<<parameters.release>>" == "true" ]; then
                  cargo build --release
                else
                  cargo build
                fi
          - save_cache: &rust_save_cache
              key: cargo-cache-v1-{{ arch }}-{{ checksum "<<parameters.path>>/Cargo.lock" }}
              paths:
                - <<parameters.path>>/target
      test:
        executor: docker
        parameters:
          version:
            type: string
            default: "latest"
          path:
            type: string
            default: .
        steps:
          - install_deps
          - checkout
          - restore_cache: *rust_restore_cache
          - run:
              name: Run tests
              command: |
                cd <<parameters.path>>
                cargo test
          - save_cache: *rust_save_cache
    commands:
      install_deps:
        steps:
          - run:
              name: Install deps
              command: |
                apt-get update
                apt-get install -y git

# Aliases  #########################################################

publish: &publish
  name: publish
  publish-token-variable: "$CIRCLECI_DEV_API_TOKEN"
  validate: true
  checkout: false
  attach-workspace: true
  requires:
    - extract-orb/default

release: &release
  name: release
  publish-token-variable: "$CIRCLECI_DEV_API_TOKEN"
  validate: true
  checkout: false
  attach-workspace: true
  filters:
    branches:
      only: master
  requires:
    - publish

# Actual tests #########################################################

workflows:
  docker:
    jobs:
      - docker/build-test-push:
          namespace: foobar
          project: alpine
          test_command: vim --version | grep VIM
          push: false
          path: test
      - extract-orb/default:
          orb: docker
          requires:
            - docker/build-test-push
      - orb-tools/publish:
          <<: *publish
          orb-path: docker.yml
          orb-ref: brownjohnf/docker@dev:${CIRCLE_SHA1}
      - orb-tools/increment:
          <<: *release
          orb-path: docker.yml
          orb-ref: brownjohnf/docker
          segment: patch
  rust:
    jobs:
      - rust/test:
          name: test_test
          path: test/rust
      - rust/build:
          name: test_build_debug
          release: false
          path: test/rust
      - rust/build:
          name: test_build_release
          release: true
          path: test/rust
      - rust_test_cache:
          requires:
            - test_build_debug
      - extract-orb/default:
          orb: rust
          requires:
            - test_test
            - test_build_release
            - rust_test_cache
      - orb-tools/publish:
          <<: *publish
          orb-path: rust.yml
          orb-ref: brownjohnf/rust@dev:${CIRCLE_BRANCH}
      - orb-tools/increment:
          <<: *release
          orb-path: rust.yml
          orb-ref: brownjohnf/rust
          segment: patch

jobs:
  rust_test_cache:
    docker:
      - image: brownjohnf/alpine:master
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ arch }}-{{ checksum "test/rust/Cargo.lock" }}
      - run: |
          set -x
          ls -lah
          ls -lah test
          ls -lah test/rust
          ls -lah test/rust/target

